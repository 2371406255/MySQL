SQL入门基础（SQL Server）
一、新建数据库和表
连接本地服务器，数据库右键，新建数据库，表右键新建表；
添加字段和数据；我新建table1表，字段数据如下：
Id          LastName    FirstName   Address     City
1         	candy     	S         	street1   	chengdu
2         	John      	W         	street2   	beijing
3         	Mery      	N         	street3   	nanjing
4         	Bob       	M         	street4   	changsha
5         	Linda     	T         	street5   	chongqing
2         	Ruyi      	O         	street6   	hangzhou

SQL 对大小写不敏感！！！！
SQL中所谓的【列】就是横着的【行】！！！
----------------------------------------------开始说正题---------------------------------------
二、基本语句（查增删改）
1.select 查询（查）
语法格式：SELECT 列名称 FROM 表名称；
eg.select Id form table1;//查询table1表中id字段的所有数据
   select * from table1;//*表示table1表中的所有数据

1.2.select distinct查询
语法格式：SELECT DISTINCT 列名称 FROM 表名称
          distinct关键字：去重，返回唯一不同的值
eg.select distinct Id from table1;//返回的Id字段不重复的数据

1.3.where条件查询
语法格式：SELECT 列名称 FROM 表名称 WHERE 列 运算符 值
eg.select Id from table1  where LastName='John';

1.3.1.运算符
=	等于
<>	不等于
!=  不等于（某些版本的SQL支持）
>	大于
<	小于
>=	大于等于
<=	小于等于
between	 在某个范围内
like	搜索某种模式/模糊搜索

1.3.2.引号的使用
SQL 使用单引号来环绕文本值（大部分数据库系统也接受双引号）。如果是数值，请不要使用引号
eg.select * from table1 where City='chongqing';

1.4.and/or运算符
and 和 or 可在 where 子语句中把两个或多个条件结合起来;
eg.select * from table1 where City = 'chongqing' and LastName='Linda';//两个条件都满足
   select * from table1 where City = 'chongqing' or LastName='Mery'//两个条件中一个满足或都满足
   select * from table1 where (City = 'chongqing'and Address='street5') or LastName='Mery';

1.5.order by排序
默认按照【升序】对记录进行排序；
【降序】对记录进行排序，可以使用 desc 关键字
【升序】对纪录进行排序，可以使用asc关键字
eg.select * from table1 order by Id desc;//降序
   select * from table1 order by Id ;//升序
   select * from table1 order by City asc;//按City字段数据首字母升序排序

2.insert into插入（增）
语法规则：INSERT INTO 表名称 VALUES (值1, 值2,....)
          INSERT INTO table_name (列1, 列2,...) VALUES (值1, 值2,....);//指定插入的列
eg.insert into table1 values(6,'test1','A','street7','menggu');//每个数据都必须对应到字段，如果数量或者格式不匹配会报错
eg.insert into table1 (Id,LastName,FirstName,Address)values(9,'','B','street8');//可以指定插入的列，但必须一一对应！！！

3.delete删除（删）
语法规则：DELETE FROM 表名称 WHERE 列名称 = 值
eg.delete from table1 where Id=10//删除Id=10那一列所以的数据

4.update修改（改）
语法规则：UPDATE 表名称 SET 列名称 = 新值 WHERE 列名称 = 某值
eg.update table1 set Id=10 where Id=9 and Address!='';
   update table1 set LastName='Yoyo',FirstName='D' ,Address='street9',City='dongjing' where Id=9;//若有值就修改，若为空就添加
可以在不删除表的情况下删除所有的行。这意味着表的结构、属性和索引都是完整的
语法规则：DELETE FROM table_name
or DELETE * FROM table_name

---------------------------------------高级教程-------------------------------------------
1.top语句
TOP 子句用于规定要返回的记录的数目，对于拥有数千条记录的大型表来说，TOP 子句是非常有用的。
【注意】并非所有的数据库系统都支持 TOP 子句！！！

1.1.SQL中语法规则：SELECT TOP number|percent column_name(s) FROM table_name
eg.select top 5 Id from table1;//查询table1表中，前5条Id字段的数据
   select top 5 * from table1;//查询table1表中，前5条所有字段的数据
   select top 50 percent * from table1;//查询table1表中，前50%所有字段的数据

1.2.MySQL语法规则：SELECT column_name(s) FROM table_name LIMIT number
eg.自己安装MySQL去试一试吧~

2.like操作符
LIKE 操作符用于在 where 子句中搜索列中的指定模式
SQL语法规则：SELECT column_name(s) FROM table_name WHERE column_name LIKE pattern
eg.select * from table1 where Address like 'street%';//查询table1表中Address字段的以street开头的所有数据
【注意】xxx%：表示以xxx开头；
        %xxx：表示以xxx结尾；
        %xxx%：表示包含字符中的xxx字符；
3.通配符
在搜索数据库中的数据时，SQL 通配符可以替代一个或多个字符
【注意】SQL 通配符必须与 like 运算符一起使用！！！
            %	                    替代一个或多个字符
            _	                    仅替代一个字符
        [charlist]	                字符列中的任何单一字符
[^charlist]或者[!charlist]          不在字符列中的任何单一字符
eg.select City from table1 where City like '[abcd]%';//查询table1表中City字段以a,b,c,d其中任意一个字符开头的City数据
   select City from table1 where City like '[^abcd]%'或者select City from table1 where City like '[!abcd]%';//查询table1表中City字段不以a,b,c,d其中任意一个字符开头的City数据

4.in操作符
IN 操作符允许我们在 where 子句中规定多个值
SQL语法规则：SELECT column_name(s) FROM table_name WHERE column_name IN (value1,value2,...)
eg.select * from table1 where City in('chengdu','menggu','nanjing');//查询table1表中City字段为'chengdu'或者'nanjing'或者'menggu'的所有字段数据

5.between and操作符
操作符 between ... and 会选取介于两个值之间的数据范围。这些值可以是数值、文本或者日期。
语法规则：SELECT column_name(s) FROM table_name WHERE column_name BETWEEN value1 AND value2
eg.select * from table1 where Id between 1 and 6;//查询Id字段数据在1到6之间对应的所有数据

5.1 not (between and)/(like)操作符
显示范围之外的
语法规则：SELECT column_name(s) FROM table_name WHERE column_name NOT BETWEEN value1 AND value2
eg.select * from table1 where Id not between 1 and 2;//查询Id字段数据不在1到6之间对应的所有数据
eg.select * from table1 where name not like '%abc%';//查找table1表中name字段里不包含abc的数据

6. as别名
语法规则：SELECT column_name(s) FROM table_name AS alias_name
可以为列名称和表名称指定别名（Alias）,字段过长是用别名替代可以提高查询效率
eg.select Id as num from  table1;//把table1表中Id字段暂时用num（别名）代替
【注意】不会改变字段名称，只在当次语句中有效
eg.select tb.LastName,tb.FirstName from table1 as tb where City like '%dong%';//将table1表别名为tb
   select LastName as last,FirstName as first from table1 where LastName  like '%J%';//将LastName字段别名为last

7.join和key
有时为了得到完整的结果，我们需要从两个或更多的表中获取结果。我们就需要执行 join
数据库中的表可通过键将彼此联系起来。主键（Primary Key）是一个列，在这个列中的每一行的值都是唯一的。
在表中，每个主键的值都是唯一的。这样做的目的是在不重复每个表中的所有数据的情况下，把表间的数据交叉捆绑在一起。
eg.select table1.LastName,table1.FirstName from table1,table2 where table1.Id=table2.Id;//查询table1和table2中Id相等的LastName和FirstName的字符数据
    select table1.LastName,table1.FirstName from table1 inner join table2 on table1.Id=table2.Id;//join关键字链接两个表的所有数据

join: 如果表中有至少一个匹配，则返回行
left join: 即使右表中没有匹配，也从左表返回所有的行
right join: 即使左表中没有匹配，也从右表返回所有的行
full join: 只要其中一个表中存在匹配，就返回行

8.inner join关键字
在表中存在至少一个匹配时，INNER JOIN 关键字返回行
语法规则：SELECT column_name(s) FROM table_name1 INNER JOIN table_name2 ON table_name1.column_name=table_name2.column_name
【注意】INNER JOIN 与 JOIN 是相同的！！！

9.left join
left join 关键字会从左表 (table1) 那里返回所有的行，即使在右表 (table2) 中没有匹配的行。
语法规则：SELECT column_name(s) FROM table_name1 LEFT JOIN table_name2 ON table_name1.column_name=table_name2.column_name
eg.select * from table1 left join table2 on table1.Id=table2.Id

10.right join
right join 关键字会右表 (table2) 那里返回所有的行，即使在左表 (table1) 中没有匹配的行
【注意】在某些数据库中， right join 称为right outer join

11.full join关键字
只要其中某个表存在匹配，full join 关键字就会返回行
语法规则：SELECT column_name(s) FROM table_name1 FULL JOIN table_name2  ON table_name1.column_name=table_name2.column_name

12.union操作符
union 操作符用于合并两个或多个 select 语句的结果集
【注意】union 内部的 select 语句必须拥有相同数量的列。列也必须拥有相似的数据类型。同时，每条 select 语句中的列的顺序必须相同。
语法规则：SELECT column_name(s) FROM table_name1
          UNION
          SELECT column_name(s) FROM table_name2
【注意】默认地，union 操作符选取不同的值。如果允许重复的值，请使用 UNION ALL

13.union all
语法规则：SELECT column_name(s) FROM table_name1
          UNION ALL
          SELECT column_name(s) FROM table_name2


alter//改变改动
alert//弹出警告

14. 两张表a,b 将b中的列数据更新到a对应的列中
语法： update a,b set a.goods_name = b.goods_name where a.goods_id = b.id

15. 两张表a,b 向a中插入没有b表中的数据
语法：insert into a (id,name,age...) select id,name,age... from b 
      where a.id in (
      select id from a 
       where not exists(
         select id from b
        on b.id = a.id
       )
   )
















